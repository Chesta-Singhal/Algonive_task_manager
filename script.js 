let tasks = JSON.parse(localStorage.getItem("tasks")) || [];
const taskForm = document.getElementById("taskForm");
const taskList = document.getElementById("taskList");
const searchInput = document.getElementById("search");

document.getElementById("toggleTheme").onclick = () =>
  document.body.classList.toggle("dark-theme");

function saveTasks() {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

function renderTasks(filter = "all") {
  taskList.innerHTML = "";
  let filtered = tasks.filter((task) => {
    if (filter === "complete") return task.completed;
    if (filter === "incomplete") return !task.completed;
    return true;
  });

  const searchTerm = searchInput.value.toLowerCase();
  filtered = filtered.filter(task => task.title.toLowerCase().includes(searchTerm));

  filtered.forEach((task, i) => {
    const li = document.createElement("li");
    li.className = "task " + (task.completed ? "complete" : "");
    li.style.borderColor = task.priority === "High" ? "red" :
                           task.priority === "Medium" ? "orange" : "green";

    li.innerHTML = `
      <h3>${task.title}</h3>
      <p>${task.description}</p>
      <p>Due: ${task.dueDate} | Priority: ${task.priority}</p>
      <div class="actions">
        <button onclick="toggleComplete(${i})">${task.completed ? "Undo" : "Complete"}</button>
        <button onclick="editTask(${i})">Edit</button>
        <button onclick="deleteTask(${i})">Delete</button>
      </div>
    `;

    taskList.appendChild(li);
  });
}

function toggleComplete(index) {
  tasks[index].completed = !tasks[index].completed;
  saveTasks();
  renderTasks();
}

function editTask(index) {
  const task = tasks[index];
  document.getElementById("title").value = task.title;
  document.getElementById("description").value = task.description;
  document.getElementById("dueDate").value = task.dueDate;
  document.getElementById("priority").value = task.priority;
  tasks.splice(index, 1);
  saveTasks();
  renderTasks();
}

function deleteTask(index) {
  if (confirm("Delete this task?")) {
    tasks.splice(index, 1);
    saveTasks();
    renderTasks();
  }
}

taskForm.onsubmit = (e) => {
  e.preventDefault();
  const title = document.getElementById("title").value;
  const description = document.getElementById("description").value;
  const dueDate = document.getElementById("dueDate").value;
  const priority = document.getElementById("priority").value;

  tasks.push({ title, description, dueDate, priority, completed: false });
  saveTasks();
  taskForm.reset();
  renderTasks();
};

searchInput.oninput = () => renderTasks();

function filterTasks(filter) {
  renderTasks(filter);
}

// Reminder system
setInterval(() => {
  const now = new Date();
  tasks.forEach(task => {
    const taskDate = new Date(task.dueDate);
    const timeDiff = taskDate - now;
    if (timeDiff > 0 && timeDiff < 24 * 60 * 60 * 1000 && !task.alerted) {
      alert(`Reminder: Task "${task.title}" is due soon!`);
      task.alerted = true;
      saveTasks();
    }
  });
}, 60000); // Check every minute

renderTasks();
